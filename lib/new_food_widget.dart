import 'dart:io';

import 'package:flutter/material.dart';
import 'package:flutter/services.dart';
import 'package:path/path.dart';
import 'package:image_picker/image_picker.dart';
import 'package:calorie_tracker/food.dart';
import 'main.dart';

// –ö–ª–∞—Å, —â–æ –¥–æ–∑–≤–æ–ª—è—î –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–µ–≤—ñ –¥–æ–¥–∞–≤–∞—Ç–∏ –Ω–æ–≤—ñ –∑–∞–ø–∏—Å–∏ –ø—Ä–æ —ó–∂—É
class NewFoodWidget extends StatefulWidget {
  const NewFoodWidget({Key? key}) : super(key: key);

  @override
  State<NewFoodWidget> createState() => NewFoodState();
}

class NewFoodState extends State<NewFoodWidget> {
  // –ó–æ–±—Ä–∞–∂–µ–Ω–Ω—è –∑–∞ –∑–∞–º–æ–≤—á—É–≤–∞–Ω–Ω—è–º –¥–ª—è –Ω–æ–≤–æ—ó —Å—Ç—Ä–∞–≤–∏
  static ImageProvider image = const AssetImage("assets/burger.png");
  // –§–∞–π–ª –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è –¥–ª—è –≤–∏–±—Ä–∞–Ω–æ—ó —Å—Ç—Ä–∞–≤–∏
  static late File imageFile;
  static late BuildContext buildContext;
  // –ü—Ä–∞–ø–æ—Ä–µ—Ü—å, —â–æ –ø–æ–∫–∞–∑—É—î, —á–∏ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–æ–≤–∞–Ω–µ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è
  static bool imageInited = false;
  // –ö–æ–Ω—Ç—Ä–æ–ª–µ—Ä–∏ –¥–ª—è –≤–≤–µ–¥–µ–Ω–Ω—è –¥–∞–Ω–∏—Ö –ø—Ä–æ –Ω–æ–≤—É —Å—Ç—Ä–∞–≤—É
  static TextEditingController proteinController = TextEditingController(),
      carbController = TextEditingController(),
      fatController = TextEditingController(),
      nameController = TextEditingController(),
      calorieController = TextEditingController();
  // –ú–µ—Ç–æ–¥ –¥–ª—è –æ—Ç—Ä–∏–º–∞–Ω–Ω—è —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ –ø–æ–ª—è –≤–≤–æ–¥—É
  Widget getInputField(String label, TextEditingController controller,
      {bool isnumber = true}) {
    return TextField(
        controller: controller,
        decoration: InputDecoration(
          labelText: label,
        ),
        keyboardType: isnumber ? TextInputType.number : TextInputType.text);
  }

  @override
  Widget build(BuildContext context) {
    buildContext = context;
    return Stack(
      children: [
        Positioned(
            top: 50,
            left: 10,
            child:
            Image(image: image, width: 150, height: 150, fit: BoxFit.fill)),
        Positioned(
            top: 200,
            left: 45,
            child: TextButton(
              onPressed: () => addImagePressed(),
              style: ButtonStyle(
                  backgroundColor:
                  MaterialStateProperty.all<Color>(Colors.amber[900]!),
                  foregroundColor:
                  MaterialStateProperty.all<Color>(Colors.white)),
              child: const Text("Add Image"),
            )),
        Positioned(
            top: 60,
            left: 180,
            width: 140,
            height: 50,
            child: getInputField("Name", nameController, isnumber: false)),
        Positioned(
            left: 180,
            top: 120,
            width: 100,
            height: 50,
            child: getInputField("Calories", calorieController)),
        Positioned(
            left: 180,
            top: 170,
            width: 100,
            height: 50,
            child: getInputField("ü•©", proteinController)),
        Positioned(
            left: 180,
            top: 220,
            width: 100,
            height: 50,
            child: getInputField("ü•î", carbController)),
        Positioned(
            left: 180,
            top: 270,
            width: 100,
            height: 50,
            child: getInputField("üßÄ", fatController)),
        Align(
            alignment: Alignment.bottomRight,
            child: Padding(
              padding: const EdgeInsets.all(10),
              child: FloatingActionButton(
                  onPressed: addFoodPressed, child: const Icon(Icons.check)),
            ))
      ],
    );
  }

  // –ú–µ—Ç–æ–¥, —â–æ –≤–∏–∫–ª–∏–∫–∞—î—Ç—å—Å—è –ø—Ä–∏ –Ω–∞—Ç–∏—Å–∫–∞–Ω–Ω—ñ –∫–Ω–æ–ø–∫–∏ –¥–ª—è –¥–æ–¥–∞–≤–∞–Ω–Ω—è —Å—Ç—Ä–∞–≤–∏
  void addFoodPressed() async {
    final manager = ScaffoldMessenger.of(buildContext);
    // –ü–æ–∫–∞–∑–∞—Ç–∏ —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–µ–≤—ñ, —è–∫—â–æ –Ω–µ –≤—Å—ñ –ø–æ–ª—è –∑–∞–ø–æ–≤–Ω–µ–Ω—ñ
    if (proteinController.text == "" ||
        carbController.text == "" ||
        fatController.text == "" ||
        nameController.text == "" ||
        calorieController.text == "") {
      manager.showSnackBar(
          const SnackBar(content: Text("Please fill in all the inputs above")));
      return;
    }
    // –û—Ç—Ä–∏–º–∞—Ç–∏ –∑–Ω–∞—á–µ–Ω–Ω—è –≤–≤–µ–¥–µ–Ω–∏—Ö –¥–∞–Ω–∏—Ö —Ç–∞ –ø–µ—Ä–µ–≤—ñ—Ä–∏—Ç–∏ —ó—Ö–Ω—é –∫–æ—Ä–µ–∫—Ç–Ω—ñ—Å—Ç—å
    double? protein = double.tryParse(proteinController.text);
    double? carbs = double.tryParse(carbController.text);
    double? fat = double.tryParse(fatController.text);
    double? calories = double.tryParse(calorieController.text);
    if (calories == null || protein == null || fat == null || carbs == null) {
      manager.showSnackBar(const SnackBar(content: Text("Only numbers")));
      return;
    }
    String name = nameController.text;
    if (imageInited) {
      String path = await getFilePath(name + extension(imageFile.path));
      imageFile = await imageFile.copy(path);
    }
    // –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –Ω–æ–≤–æ–≥–æ –æ–±'—î–∫—Ç–∞ —Å—Ç—Ä–∞–≤–∏
    Food newFood = Food(
        imagefile: (imageInited ? basename(imageFile.path) : "none"),
        name: name,
        macros: MacroNutrients(
            protein: protein,
            fat: fat,
            carbohidrates: carbs,
            calories: calories));
    for (int i = 0; i < Foods.length; i++) {
      if (Foods[i].name == name) {
        Foods.removeAt(i);
        break;
      }
    }
    // –î–æ–¥–∞—Ç–∏ –Ω–æ–≤—É —Å—Ç—Ä–∞–≤—É –≤ —Å–ø–∏—Å–æ–∫ —ñ –∑–±–µ—Ä–µ–≥—Ç–∏ –π–æ–≥–æ
    Foods.add(newFood);
    saveFoods();
    // –ü–æ–∫–∞–∑–∞—Ç–∏ —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–µ–≤—ñ –ø—Ä–æ —É—Å–ø—ñ—à–Ω–µ –¥–æ–¥–∞–≤–∞–Ω–Ω—è —Å—Ç—Ä–∞–≤–∏
    manager.showSnackBar(const SnackBar(content: Text("Food added")));
  }

  // –ú–µ—Ç–æ–¥, —â–æ –≤–∏–∫–ª–∏–∫–∞—î—Ç—å—Å—è –ø—Ä–∏ –Ω–∞—Ç–∏—Å–∫–∞–Ω–Ω—ñ –∫–Ω–æ–ø–∫–∏ –¥–ª—è –¥–æ–¥–∞–≤–∞–Ω–Ω—è –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è —Å—Ç—Ä–∞–≤–∏
  void addImagePressed() async {
    final ImagePicker picker = ImagePicker();
    final XFile? photo = await picker.pickImage(source: ImageSource.camera);
    setState(() {
      if (photo != null) {
        imageFile = File(photo.path);
        image = FileImage(imageFile);
        imageInited = true;
      }
    });
  }
}
