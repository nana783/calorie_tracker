import 'package:flutter/material.dart';
import 'package:google_fonts/google_fonts.dart';
import 'package:calorie_tracker/food.dart';
import 'main.dart';

/// –ö–ª–∞—Å FoodLog –ø—Ä–µ–¥—Å—Ç–∞–≤–ª—è—î –∑–∞–ø–∏—Å –ø—Ä–æ —Å–ø–æ–∂–∏–≤–∞–Ω—É —Å—Ç—Ä–∞–≤—É
class FoodLog {
  /// –ù–∞–∑–≤–∞ —Å—Ç—Ä–∞–≤–∏
  late String foodName;
  /// –í–∞–≥–∞ –≤ –≥—Ä–∞–º–∞—Ö
  late int grams;
  /// –ì–æ–¥–∏–Ω–∞ —Ç–∞ —Ö–≤–∏–ª–∏–Ω–∞ —Å–ø–æ–∂–∏–≤–∞–Ω–Ω—è
  late int hour, minute;

  /// –ö–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä, —â–æ —Å—Ç–≤–æ—Ä—é—î –æ–±'—î–∫—Ç FoodLog –∑ JSON –æ–±'—î–∫—Ç–∞
  FoodLog({required this.grams, required this.foodName});

  /// –ö–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä –∑ JSON –æ–±'—î–∫—Ç–∞
  FoodLog.fromJson(Map<String, dynamic> json)
      : foodName = json['name'],
        grams = json['grams'],
        hour = json['hour'],
        minute = json['minute'];

  /// –ü–µ—Ä–µ—Ç–≤–æ—Ä–µ–Ω–Ω—è –≤ JSON –æ–±'—î–∫—Ç
  Map<String, dynamic> toJson() =>
      {'name': foodName, 'grams': grams, 'hour': hour, 'minute': minute};

  /// –ú–µ—Ç–æ–¥ –¥–ª—è –æ–±—á–∏—Å–ª–µ–Ω–Ω—è –º–∞–∫—Ä–æ–Ω—É—Ç—Ä—ñ—î–Ω—Ç—ñ–≤ —Å—Ç—Ä–∞–≤–∏.
  MacroNutrients calculateMacros() {
    double protein = -1; // –ë—ñ–ª–∫–∏.
    double carbs = 0; // –í—É–≥–ª–µ–≤–æ–¥–∏.
    double fat = 0; // –ñ–∏—Ä–∏.
    double calories = 0; // –ö–∞–ª–æ—Ä—ñ—ó.
    for (int i = 0; i < Foods.length; i++) {
      if (Foods[i].name == foodName) { // –ü–æ—à—É–∫ —Å—Ç—Ä–∞–≤–∏ –≤ —Å–ø–∏—Å–∫—É Foods
        double foodRatio = grams.toDouble() / 100.0; // –í—ñ–¥—Å–æ—Ç–æ–∫ –≥—Ä–∞–º —É –≤–∞–≥—É —Å—Ç—Ä–∞–≤–∏
        protein = Foods[i].macros.protein * foodRatio; // –†–æ–∑—Ä–∞—Ö—É–Ω–æ–∫ –±—ñ–ª–∫—ñ–≤
        carbs = Foods[i].macros.carbohidrates * foodRatio; // –†–æ–∑—Ä–∞—Ö—É–Ω–æ–∫ –≤—É–≥–ª–µ–≤–æ–¥—ñ–≤
        fat = Foods[i].macros.fat * foodRatio; // –†–æ–∑—Ä–∞—Ö—É–Ω–æ–∫ –∂–∏—Ä—ñ–≤
        calories = Foods[i].macros.calories * foodRatio; // –†–æ–∑—Ä–∞—Ö—É–Ω–æ–∫ –∫–∞–ª–æ—Ä—ñ–π
        return MacroNutrients(
            calories: calories,
            protein: protein,
            carbohidrates: carbs,
            fat: fat); // –ü–æ–≤–µ—Ä–Ω–µ–Ω–Ω—è –æ–±'—î–∫—Ç–∞ –∑ –º–∞–∫—Ä–æ–Ω—É—Ç—Ä—ñ—î–Ω—Ç–∞–º–∏
      }
    }
    return MacroNutrients(
        calories: -1, protein: -1, carbohidrates: -1, fat: -1); // –ü–æ–≤–µ—Ä–Ω–µ–Ω–Ω—è –∑–Ω–∞—á–µ–Ω—å –∑–∞ –≤—ñ–¥—Å—É—Ç–Ω–æ—Å—Ç—ñ —Å—Ç—Ä–∞–≤–∏ –≤ —Å–ø–∏—Å–∫—É.
  }

  /// –ú–µ—Ç–æ–¥ –¥–ª—è –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –≤—ñ–¥–∂–µ—Ç–∞ –∑–∞–ø–∏—Å—É –ø—Ä–æ —Å–ø–æ–∂–∏–≤–∞–Ω—É —Å—Ç—Ä–∞–≤—É.
  Widget getLogWidget() {
    var macros = calculateMacros(); // –û–±—á–∏—Å–ª–µ–Ω–Ω—è –º–∞–∫—Ä–æ–Ω—É—Ç—Ä—ñ—î–Ω—Ç—ñ–≤ —Å—Ç—Ä–∞–≤–∏.
    if (macros.protein == -1) {
      // –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –Ω–∞—è–≤–Ω–æ—Å—Ç—ñ —Å—Ç—Ä–∞–≤–∏ –≤ —Å–ø–∏—Å–∫—É.
      return Text('Food $foodName not found'); // –í–∏–≤–µ–¥–µ–Ω–Ω—è –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è, —è–∫—â–æ —Å—Ç—Ä–∞–≤–∞ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–∞.
    }
    // –ü–æ–±—É–¥–æ–≤–∞ –≤—ñ–¥–∂–µ—Ç–∞ –¥–ª—è –≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è –∑–∞–ø–∏—Å—É –ø—Ä–æ —Å–ø–æ–∂–∏–≤–∞–Ω—É —Å—Ç—Ä–∞–≤—É.
    return Padding(
      padding: const EdgeInsets.only(bottom: 10, left: 10, right: 10),
      child: Container(
        height: 50,
        decoration: BoxDecoration(
          color: Colors.amber[900],
          borderRadius: BorderRadius.circular(6),
        ),
        child: Stack(
          children: [
            // –í—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è –Ω–∞–∑–≤–∏ —Å—Ç—Ä–∞–≤–∏ —Ç–∞ –≥—Ä–∞–º —É –≤—ñ–¥–∂–µ—Ç—ñ.
            Align(
              alignment: Alignment.topCenter,
              child: Text(
                "$foodName(${grams}g)",
                style: GoogleFonts.robotoMono(
                  color: Colors.white,
                  fontWeight: FontWeight.bold,
                ),
              ),
            ),
            // –í—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è –≥–æ–¥–∏–Ω–∏ —Ç–∞ —Ö–≤–∏–ª–∏–Ω–∏ —Å–ø–æ–∂–∏–≤–∞–Ω–Ω—è —Å—Ç—Ä–∞–≤–∏.
            Align(
              alignment: Alignment.topLeft,
              child: Padding(
                padding: const EdgeInsets.only(left: 10),
                child: Text(
                  "${hour < 10 ? "0$hour" : hour.toString()}:${minute < 10 ? "0$minute" : minute.toString()}",
                  style: GoogleFonts.mukta(color: Colors.white),
                ),
              ),
            ),
            // –í—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è –∫—ñ–ª—å–∫–æ—Å—Ç—ñ –∫–∞–ª–æ—Ä—ñ–π.
            Align(
              alignment: Alignment.topRight,
              child: Padding(
                padding: const EdgeInsets.only(right: 10),
                child: Text(
                  "${macros.calories.toStringAsFixed(2)}cal",
                  style: GoogleFonts.mukta(color: Colors.white),
                ),
              ),
            ),
            // –í—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è –º–∞–∫—Ä–æ–Ω—É—Ç—Ä—ñ—î–Ω—Ç—ñ–≤ (–±—ñ–ª–∫–∏, –≤—É–≥–ª–µ–≤–æ–¥–∏, –∂–∏—Ä–∏).
            Positioned(
              top: 20,
              width: 350,
              child: Wrap(
                alignment: WrapAlignment.spaceAround,
                children: [
                  Text(
                    "ü•©${macros.protein.toStringAsFixed(2)}", // –ë—ñ–ª–∫–∏.
                    style: GoogleFonts.bebasNeue(color: Colors.white),
                  ),
                  Text(
                    "ü•î${macros.carbohidrates.toStringAsFixed(2)}", // –í—É–≥–ª–µ–≤–æ–¥–∏.
                    style: GoogleFonts.bebasNeue(color: Colors.white),
                  ),
                  Text(
                    "üßÄ${macros.fat.toStringAsFixed(2)}", // –ñ–∏—Ä–∏.
                    style: GoogleFonts.bebasNeue(color: Colors.white),
                  ),
                ],
              ),
            ),
          ],
        ),
      ),
    );
  }
}
